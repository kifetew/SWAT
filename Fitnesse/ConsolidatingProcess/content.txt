!c !2 Consolidating Process

!3 First Version

First, we were not able to have an exact check of the output content (yet it seemed equivalent, Fitnesse told us it was not, having a red result, maybe some encoding issues?). In order to solve that, we defined a test using directories containing our I/O data.

| !-fixtures.ConsolidatingDialogFixture-! |
| input_dir | output_dir | output_filename | expected_filename | result? |
| test_run | fitnesse_test | reconciled.bib | fitnesse_test/expected_correct.bib | true |
| test_run | fitnesse_test | reconciled.bib | fitnesse_test/expected_wrong.bib | false |

This has the advantage to be easy to design, but it hides completely the content we are testing (because of Fitnesse management) it is not portable.

To mitigate these problems, we did a test closer to a unit test (simplifying the data), but being clear in what is used (no external resource is used).

!3 Second Version

Concretely, we define 3 bib entries:
* entry1: ''1|name=value''
* entry2: ''2|name=value|name2=value2''
* entry3: ''3|name=value''
Here, the entry 1 as the key "1" and a field ''name'' having the value ''value''. The entry 2 as the key "2" and two fields (''name'' and ''name2'') with their values, etc.

Then we define 2 files containing these entries:
* file1: ''1|3''
* file2: ''1|2''
Here, the file 1 have the entries 1 and 3, and the file 2 the entries 1 and 2.

Finally, we define the expected results, which means the amount of known entries (1, 2 and 3) we can find in the output file:
* amount1? 1
* amount2? 1
* amount3? 1
In our example, as the 2 input files have the 3 entries, we should find the entry 1, the entry 2 and the entry 3 in the consolidated output (''amountX''>0). But because their should have no double, we should not find them more than one time (''amountX''<2). This is why, for our example, all the amounts should be 1.

Here is the dataset to test:
| !-fixtures.ConsolidatingDialogFixture2-! |
| entry1 | entry2 | entry3 | file1 | file2 | amount1? | amount2? | amount3? |
| !-1|name=value-! | !-2|name=value|name2=value2-! | !-3|name=value-! | !-1-! | !-null-! | 1 | 0 | 0 |
|  |  |  | !-2-! | !-null-! | 0 | 1 | 0 |
|  |  |  | !-3-! | !-null-! | 0 | 0 | 1 |
|  |  |  | !-1|2-! | !-null-! | 1 | 1 | 0 |
|  |  |  | !-1|3-! | !-null-! | 1 | 0 | 1 |
|  |  |  | !-2|1-! | !-null-! | 1 | 1 | 0 |
|  |  |  | !-2|3-! | !-null-! | 0 | 1 | 1 |
|  |  |  | !-3|1-! | !-null-! | 1 | 0 | 1 |
|  |  |  | !-3|2-! | !-null-! | 0 | 1 | 1 |
|  |  |  | !-1|2|3-! | !-null-! | 1 | 1 | 1 |
|  |  |  | !-1|3|2-! | !-null-! | 1 | 1 | 1 |
|  |  |  | !-2|1|3-! | !-null-! | 1 | 1 | 1 |
|  |  |  | !-2|3|1-! | !-null-! | 1 | 1 | 1 |
|  |  |  | !-3|1|2-! | !-null-! | 1 | 1 | 1 |
|  |  |  | !-3|2|1-! | !-null-! | 1 | 1 | 1 |
|  |  |  | !-null-! | !-1-! | 1 | 0 | 0 |
|  |  |  | !-null-! | !-2-! | 0 | 1 | 0 |
|  |  |  | !-null-! | !-3-! | 0 | 0 | 1 |
|  |  |  | !-null-! | !-1|2-! | 1 | 1 | 0 |
|  |  |  | !-null-! | !-1|3-! | 1 | 0 | 1 |
|  |  |  | !-null-! | !-2|1-! | 1 | 1 | 0 |
|  |  |  | !-null-! | !-2|3-! | 0 | 1 | 1 |
|  |  |  | !-null-! | !-3|1-! | 1 | 0 | 1 |
|  |  |  | !-null-! | !-3|2-! | 0 | 1 | 1 |
|  |  |  | !-null-! | !-1|2|3-! | 1 | 1 | 1 |
|  |  |  | !-null-! | !-1|3|2-! | 1 | 1 | 1 |
|  |  |  | !-null-! | !-2|1|3-! | 1 | 1 | 1 |
|  |  |  | !-null-! | !-2|3|1-! | 1 | 1 | 1 |
|  |  |  | !-null-! | !-3|1|2-! | 1 | 1 | 1 |
|  |  |  | !-null-! | !-3|2|1-! | 1 | 1 | 1 |
|  |  |  | !-1-! | !-1-! | 1 | 0 | 0 |
|  |  |  | !-1-! | !-2-! | 1 | 1 | 0 |
|  |  |  | !-1-! | !-3-! | 1 | 0 | 1 |
|  |  |  | !-2-! | !-1-! | 1 | 1 | 0 |
|  |  |  | !-2-! | !-2-! | 0 | 1 | 0 |
|  |  |  | !-2-! | !-3-! | 0 | 1 | 1 |
|  |  |  | !-3-! | !-1-! | 1 | 0 | 1 |
|  |  |  | !-3-! | !-2-! | 0 | 1 | 1 |
|  |  |  | !-3-! | !-3-! | 0 | 0 | 1 |
|  |  |  | !-1|2-! | !-1|2-! | 1 | 1 | 0 |
|  |  |  | !-1|3-! | !-1|2-! | 1 | 1 | 1 |
|  |  |  | !-2|1-! | !-1|2-! | 1 | 1 | 0 |
|  |  |  | !-2|3-! | !-1|2-! | 1 | 1 | 1 |
|  |  |  | !-3|1-! | !-1|2-! | 1 | 1 | 1 |
|  |  |  | !-3|2-! | !-1|2-! | 1 | 1 | 1 |
